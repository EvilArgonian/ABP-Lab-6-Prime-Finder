/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abp.lab.pkg6.primeFinders;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Semaphore;

/**
 *
 * @author pmele
 */
public class PrimeFrame extends javax.swing.JFrame {
    
    private int primesUpTo;
    private int numThreads;
    private List<Integer> primes;
    private boolean inProgress;
    private boolean cancelled;
    private int numChecked;

    /**
     * Creates new form FactorizerFrame
     * @param title
     */
    public PrimeFrame(String title) {
        super(title);
        primesUpTo = 0;
        numThreads = 1;
        primes = new ArrayList<>();
        cancelled = false;
        numChecked = 0;
        
        setLocationRelativeTo(null);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        upToEntry = new javax.swing.JFormattedTextField();
        goButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        numThreadsEntry = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        primesDisplay = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        numCheckedDisplay = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(263, 300));

        jLabel1.setText("Get prime numbers up to: ");

        upToEntry.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        upToEntry.setText("0");

        goButton.setText("Find Primes");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Number of threads to use:");

        numThreadsEntry.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numThreadsEntry.setText("1");

        primesDisplay.setColumns(20);
        primesDisplay.setRows(5);
        jScrollPane1.setViewportView(primesDisplay);

        jLabel3.setText("Numbers checked:");

        numCheckedDisplay.setEditable(false);
        numCheckedDisplay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numCheckedDisplay.setText("0");
        numCheckedDisplay.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        numCheckedDisplay.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(upToEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(26, 26, 26)
                                .addComponent(numThreadsEntry)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numCheckedDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(upToEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numThreadsEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goButton)
                    .addComponent(cancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(numCheckedDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        primesDisplay.setText("");
        try {
            primesUpTo = Integer.parseInt(upToEntry.getText());
            numThreads = Integer.parseInt(numThreadsEntry.getText());
        } catch (Exception ex) {
            primesDisplay.setText("Invalid input(s): Could not be read.");
            return;
        }
        
        if (primesUpTo < 1 || numThreads < 1) {
            primesDisplay.setText("Invalid input(s): Inputs must be positive.");
            return;
        }
        primes = new ArrayList<>();
        
        numChecked = 0;
        goButton.setEnabled(false);
        cancelButton.setEnabled(true);
        
        new Thread(new PrimeFinderRunnable()).start();
    }//GEN-LAST:event_goButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancelled = true;
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrimeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrimeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrimeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrimeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrimeFrame("Prime Number Finder").setVisible(true);
            }
        });
    }
    
    private class PrimeFinderRunnable implements Runnable {
        @Override
        public void run() {
            
            long start = System.nanoTime();
            
            Semaphore s = new Semaphore(numThreads);
            List<FutureTask<Integer>> taskList = new ArrayList<>();
        
            for (int i = 0; i < primesUpTo; i++) {
                try {
                    s.acquire();
                    FutureTask<Integer> fTask = keepIfPrime(i, s);
                    taskList.add(fTask);
                    new Thread(fTask).start();
                } catch (InterruptedException ex) {
                    System.out.println("INTERRUPTION");
                    //Nothing here
                }
                if (cancelled) {
                    primesDisplay.setText("Cancelled!");
                    cancelled = false;
                    break;
                } else {
                    numCheckedDisplay.setText(numChecked + "");
                }
            }

            for (FutureTask<Integer> fTask : taskList) {
                try {
                    numCheckedDisplay.setText(numChecked + "");
                    Integer temp = fTask.get();
                    if (temp != null) {
                        primes.add(temp);
                    }
                } catch (Exception ex) {
                    //Do Nothing
                    ex.printStackTrace();
                }
            }
            
            numCheckedDisplay.setText(primesUpTo + ""); //Catches up last couple 
            
            long finish = System.nanoTime();
            long timeElapsed = finish - start;
            
            StringBuilder displayMe = new StringBuilder();
            displayMe.append("Primes Found: ").append(primes.size()).append("\n");
            displayMe.append("Time elapsed: ").append(timeElapsed/1000000000.0).append("s\n\n");
            
            for (Integer prime : primes) {
                displayMe.append(prime).append("\n");
            }
            primesDisplay.setText(displayMe.toString());
        
            goButton.setEnabled(true);
            cancelButton.setEnabled(false);
        }
        
    }
    
    private FutureTask<Integer> keepIfPrime(Integer keepIfPrime, Semaphore semaphore) {
        return new FutureTask<>(new Callable<Integer>() {
            @Override
            public Integer call() {
                try {
                    for (int i = 2; i < keepIfPrime / 2; i++) {
                        // condition for nonprime number
                        if (keepIfPrime % i == 0) {
                          numChecked++;
                          return null;
                        }
                        if (Thread.interrupted()) {
                            throw new InterruptedException();
                        }
                    }
                    numChecked++;
                    return keepIfPrime;
                } catch (Exception ex) {
                    ex.printStackTrace();
                } finally {
                    semaphore.release();
                }
                return null;
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField numCheckedDisplay;
    private javax.swing.JFormattedTextField numThreadsEntry;
    private javax.swing.JTextArea primesDisplay;
    private javax.swing.JFormattedTextField upToEntry;
    // End of variables declaration//GEN-END:variables
}
